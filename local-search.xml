<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Django</title>
    <link href="/2025/07/16/Django/"/>
    <url>/2025/07/16/Django/</url>
    
    <content type="html"><![CDATA[<h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><h2 id="1-新建项目和一些配置"><a href="#1-新建项目和一些配置" class="headerlink" title="1. 新建项目和一些配置"></a>1. 新建项目和一些配置</h2><p>对于Django来讲，选择pycharm进行编写，在新建项目时有具体的可视化操作</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716023122573.png" alt="image-20250716023122573"></p><p>在设置好各种基础配置后可以看到项目的初始情况</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716023306569.png" alt="image-20250716023306569"></p><p>会自动生成一个项目名称文件夹，里面包含一些基础文件，其中我们需要修改的是settings和urls。</p><p>在每次有一个新模块（类&#x2F;app），都需要在settings的INSTALLED_APPS中挂载</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716023838689.png" alt="image-20250716023838689"></p><p>上面三个是我自己新建的内容，rest_framework是引用的django的rest_framework来进行开发，所以也需要添加，剩下的就是初始生成的。</p><p>django默认的数据库sqlite，可以更改设置改为链接其他数据库</p><p>默认：</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716024036157.png" alt="image-20250716024036157"></p><p>MySQL：</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716024125894.png" alt="image-20250716024125894"></p><p>NAME是要链接的表名，USER和PASSWORD就是数据库用户名称和密码。</p><p>对于urls.py文件，在Django启动后，可以访问的网址都要在urls的urlpatterns进行“报备”</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716024513424.png" alt="image-20250716024513424"></p><p>例如现在我可以访问admin&#x2F; 和 api.urls 里定义的地址</p><h2 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2. 数据库"></a>2. 数据库</h2><p>对于django来说，默认的数据库是不需要外部链接的，新建表的方式则是通过编写模型类来新建表</p><p>首先是在根项目创建一个新的app</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716025157636.png" alt="image-20250716025157636"></p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716025216602.png" alt="image-20250716025216602"></p><p>会自动生成一些基础文件，在models里编写类（表结构）</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716025301352.png" alt="image-20250716025301352"></p><p>编写完成后在根项目控制台输入</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716025344686.png" alt="image-20250716025344686"></p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250716025351035.png" alt="image-20250716025351035"></p><p>这样就会自动生成对应的表在数据库中，在django中推荐使用这种方式建表，而不是直接在数据库中建表（这涉及到一些django的深度知识，我才学尚浅）。</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastAPI</title>
    <link href="/2025/07/10/FastAPI/"/>
    <url>/2025/07/10/FastAPI/</url>
    
    <content type="html"><![CDATA[<h1 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h1><p>FastAPI是一个用于构建API的现代、快速的web框架，使用Python语言，我接触到FastAPI是由于网上冲浪的缘故。</p><p>我对Java的后端不太感兴趣，所以一直想找别的语言做后端开发。</p><p>在机缘巧合下了解了FastAPI，之前是用Django跟着视频教学敲了几个项目，对于Django是一知半解，并不太熟练</p><p><a href="https://fastapi.tiangolo.com/zh/">FastAPI</a>的官方网站有很详细的讲解，接下来我将进行一些简单的演示</p><h2 id="安装FastAPI"><a href="#安装FastAPI" class="headerlink" title="安装FastAPI"></a>安装FastAPI</h2><p>我个人习惯在conda或在cmd里安装库都是使用pip</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> fastapi<br></code></pre></td></tr></table></figure><h2 id="导包设置"><a href="#导包设置" class="headerlink" title="导包设置"></a>导包设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br></code></pre></td></tr></table></figure><h2 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h2><p>在fastapi中我认为最核心的就是两个语句，前面的app来源则是使用FastAPI</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">app = FastAPI()<br><span class="hljs-meta">@app.get()</span><br><span class="hljs-meta">@app.put()</span><br></code></pre></td></tr></table></figure><p>使用这两个语句进行地址映射，以此来编写后续的功能代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br>app = FastAPI()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testGet</span>():<br><span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;hello&quot;</span> : <span class="hljs-string">&quot;shuiys&quot;</span>&#125; <br><br><span class="hljs-meta">@app.put(<span class="hljs-params"><span class="hljs-string">&quot;/test&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testPut</span>():<br><span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;shuiys&quot;</span> : <span class="hljs-string">&quot;hello&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>编写完简单的demo后就可以启动了</p><p>启动使用的是uvicorn</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">uvicorn &#123;文件名字&#125;:app <span class="hljs-comment">-- reload</span><br></code></pre></td></tr></table></figure><p>接下来就可以在规定的路径下看到编写的信息</p><p>首先是默认的”&#x2F;“</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250710201940352.png" alt="image-20250710201940352"></p><p>然后put请求可以使用curl来进行访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl.exe -X PUT http://localhost:8000/test<br></code></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://raw.githubusercontent.com/Shuiys-7/Picgo/main/img/image-20250710202115346.png" alt="image-20250710202115346"></p><p>对于FastAPI的初步（简单）使用就也是这些了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2025/07/05/test/"/>
    <url>/2025/07/05/test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>-学习资料</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/07/05/hello-world/"/>
    <url>/2025/07/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
